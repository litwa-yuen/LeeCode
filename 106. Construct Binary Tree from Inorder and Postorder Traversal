public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        if(inorder == null || inorder.length == 0 || postorder == null || postorder.length == 0  
        || postorder.length != inorder.length) return null;
        Map<Integer, Integer> hm = new HashMap();
        for(int i = 0; i< inorder.length; i++) hm.put(inorder[i], i);
        return buildTree(hm, inorder, 0, inorder.length-1, postorder, 0, postorder.length-1);
    }
    
    public TreeNode buildTree(Map<Integer, Integer>hm, int[]inorder, int is, int ie, int[] postorder, int ps, int pe) {
        if(ps > pe || is > ie) return null;
        TreeNode root = new TreeNode(postorder[pe]);
        int inOrderRootIndex = hm.get(postorder[pe]);
        TreeNode left =buildTree(hm, inorder, is, inOrderRootIndex-1, postorder, ps, ps+inOrderRootIndex-is-1); 
        TreeNode right = buildTree(hm, inorder,inOrderRootIndex+1, ie, postorder, ps+inOrderRootIndex-is, pe-1);
        root.left = left;
        root.right = right;
        return root;
    }
}
