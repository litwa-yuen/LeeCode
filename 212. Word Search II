public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        
        List<String> result = new LinkedList();
        TrieNode tree = buildTrie(words);
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[i].length; j++) {
                dfs(result, i, j, tree, board);
            }
        }
        return result;
    }
    
    public void dfs(List<String> result, int i, int j, TrieNode tree, char[][] board) {
        char c = board[i][j];

        if(c == '$' || tree.next[c-'a'] == null ) return;
        tree = tree.next[c-'a'];
        if(tree.word != null) {
            result.add(tree.word);
            tree.word = null;
        }
        board[i][j] = '$';
        
        if(i-1 >= 0) dfs(result, i-1, j, tree, board);
        if(i+1 < board.length) dfs(result, i+1, j, tree, board);
        if(j-1 >= 0) dfs(result, i, j-1, tree, board);
        if(j+1 < board[i].length) dfs(result, i, j+1, tree, board);

        board[i][j] = c;
    }
    
    public TrieNode buildTrie(String[] words) {
        TrieNode tree = new TrieNode();
        for(String word : words) {
            TrieNode p = tree;
            char[] array = word.toCharArray();
            for(char c : array) {
                if(p.next[c-'a'] == null) p.next[c-'a'] = new TrieNode();
                p = p.next[c-'a'];
            }
            p.word = word;
        }
        return tree;
    }
 
}


 class TrieNode {
    TrieNode[] next = new TrieNode[26];
    String word;
}
